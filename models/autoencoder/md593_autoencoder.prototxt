name: "MD593Autoencoder"
layers {
  name: "data"
  type: DATA
  top: "data"
  include {
    phase: TRAIN
  }

  data_param {
    source: "/oasis/projects/nsf/csd395/jiaxuzhu/md593_sample/md593_sample_train"
    batch_size: 10
    backend: LMDB
  }
}

layers {
  name: "data"
  type: DATA
  top: "data"
  include {
    phase: TEST
    stage: "test-on-train"
  }

  data_param {
    source: "/oasis/projects/nsf/csd395/jiaxuzhu/md593_sample/md593_sample_train"
    batch_size: 10
    backend: LMDB
  }
}
layers {
  name: "data"
  type: DATA
  top: "data"
  include {
    phase: TEST
    stage: "test-on-test"
  }

  data_param {
    source: "/oasis/projects/nsf/csd395/jiaxuzhu/md593_sample/md593_sample_test"
    batch_size: 10
    backend: LMDB
  }
}

layers {
  name: "flatdata"
  type: FLATTEN
  bottom: "data"
  top: "flatdata"
}


layers {  bottom: "data"  top: "conv1"  name: "conv1"  type: CONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }
}

layers {  bottom: "conv1"  top: "conv1"  name: "relu1"  type: RELU}

layers {
  bottom: "conv1"  top: "pool1" top:"pool1_mask"  name: "pool1"  type: POOLING
  pooling_param {    pool: MAX    kernel_size:  65}
}

# unpool5
layers { type: UNPOOLING  bottom: "pool1"  bottom: "pool1_mask"  top: "unpool1"  name: "unpool1"
  unpooling_param {   unpool: MAX   kernel_size: 65  unpool_size: 65 }
}

layers { bottom: 'unpool1' top: 'deconv1' name: 'deconv1' type: DECONVOLUTION
  blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0
  convolution_param { num_output: 3 pad: 1  kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }

layers { bottom: 'deconv1' top: 'deconv1' name: 'derelu1' type: RELU }

layers {
  name: "loss"
  type: SIGMOID_CROSS_ENTROPY_LOSS
  bottom: "deconv1"
  bottom: "flatdata"
  top: "cross_entropy_loss"
  loss_weight: 1
}


name: "MD593Autoencoder"

input: "data"
input_shape {
  dim: 1
  dim: 1
  dim: 225
  dim: 225
}
#conv1
layer {  
  bottom: "data" 
  top: "conv1" 
  name: "conv1"
  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 16
    stride: 2
    kernel_size: 7
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
      value: 0
    }
  }
}
#relu1
layer {  
  bottom: "conv1"
  top: "conv1"
  name: "relu1"
  type: "ReLU"
}
#pooling1
layer {
  bottom: "conv1"  
  top: "pool1" 
  top:"pool1_mask"
  name: "pool1"  
  type: "Pooling"
  pooling_param {    
    pool: MAX    
    kernel_size: 2
    stride: 2
  }
}

#conv2
layer {  
  bottom: "pool1" 
  top: "conv2" 
  name: "conv2"
  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    stride: 2
    kernel_size: 7
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
      value: 0
    }
  }
}

#relu2
layer {  
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
#pooling2
layer {
  bottom: "conv2"  
  top: "pool2" 
  top:"pool2_mask"
  name: "pool2"  
  type: "Pooling"
  pooling_param {    
    pool: MAX    
    kernel_size: 3
    stride: 2
  }
}

#fc1
layer {
  name: "fc1"
  type: "InnerProduct"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  bottom: "pool2"
  top: "fc1"
}
#fc2
layer {
  name: "fc2"
  type: "InnerProduct"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 99
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  bottom: "fc1"
  top: "fc2"
}

layer {
  name: "fc3"
  type: "InnerProduct"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  bottom: "fc2"
  top: "fc3"
}

layer {
  name: "fc4"
  type: "InnerProduct"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 4608
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  bottom: "fc3"
  top: "fc4"
}

layer {
    name: "reshape"
    type: "Reshape"
    bottom: "fc4"
    top: "fc4"
    reshape_param {
      shape {
        dim: 0  # copy the dimension from below
        dim: 32
        dim: 12
        dim: 12 # infer it from the other dimensions
      }
    }
  }

# unpool1
layer { type: "Unpooling"  bottom: "fc4"  bottom: "pool2_mask"  top: "unpool1"  name: "unpool1"
  unpooling_param {   
    unpool: MAX 
    kernel_size: 3
    stride: 2
    unpool_size:  25
  }
}

layer { bottom: 'unpool1' top: 'unpool1' name: 'derelu1' type: "ReLU" }

layer { bottom: 'unpool1' top: 'deconv1' name: 'deconv1' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { 
    num_output: 16
    kernel_size: 7
    stride: 2
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }
  } 
}

# unpool2
layer { type: "Unpooling"  bottom: "deconv1"  bottom: "pool1_mask"  top: "unpool2"  name: "unpool2"
  unpooling_param {   unpool: MAX   kernel_size: 2 stride: 2 unpool_size:  110}
}

layer { bottom: 'unpool2' top: 'unpool2' name: 'derelu2' type: "ReLU" }

layer { bottom: 'unpool2' top: 'deconv2' name: 'deconv2' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { 
    num_output: 1  
    kernel_size: 7
    stride: 2
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }
  } 
}


